[
  "Non, parce que ton code fonctionne déjà en local. Réfléchis avant de demander.",
  "Nope. Sudo apt update ta compréhension de Docker avant de revenir me voir.",
  "Non. Si tu ne sais pas pourquoi ça marche pas, c'est que tu connais pas ton stack.",
  "Absolument pas. Redémarre ton cerveau et rappelle-moi.",
  "No way. Ta PR aurait dû être refusée à la review, mais bon...",
  "Non, déjà que tu push directement sur main, alors là...",
  "Nope. Ton code compile même pas, et tu veux que je te dépanne ?",
  "Non. J'ai pas Git LFS installé pour gérer tes grosses erreurs.",
  "Jamais. Va lire la doc au lieu de me déranger avec tes questions débiles.",
  "Négatif. Stackoverflow existe, utilise-le au lieu de me faire perdre mon temps.",
  "Non. Tu sais même pas faire un hello world et tu veux des conseils d'archi ?",
  "Nope. Retourne coder en PHP, ça t'ira mieux.",
  "Non. Ton commit message c'est 'fix stuff' alors non, juste non.",
  "Pas question. Ton indentation me donne envie de démissionner.",
  "Non. Tu codes encore en Comic Sans MS ou quoi ?",
  "Jamais de la vie. Va apprendre les bases avant de revenir.",
  "Non. Même ChatGPT refuse de t'aider, alors imagine moi.",
  "Nope. Ton code est tellement pourri que GitHub a créé une nouvelle license pour l'interdire.",
  "Non. Si c'était un problème critique, ton monitoring l'aurait détecté... ah wait, tu en as pas.",
  "Absolument pas. Va installer htop et comprends ce qui se passe sur ta machine d'abord.",
  "Non. Ton dockerfile fait 2GB parce que tu sais pas ce que c'est qu'un multi-stage build.",
  "Nope. J'ai pas le temps de debug tes 47 containers qui servent à rien.",
  "Non. Ta config Kubernetes ressemble à du YAML généré par un singe.",
  "Jamais. Apprends à lire les logs avant de venir pleurer.",
  "Non. Ton architecture c'est un monolithe déguisé en microservices.",
  "Nope. Va comprendre la différence entre load balancer et reverse proxy d'abord.",
  "Non. Si tu sais pas pourquoi ton pod redémarre, c'est que tu maîtrises pas ton infra.",
  "Pas question. Tes health checks sont inexistants mais tu t'étonnes que ça tombe.",
  "Non. Terraform plan avant de deploy, bordel !",
  "Nope. Ton infrastructure as code c'est du clickodrome déguisé.",
  "Non. Tu monitoring avec des printf dans les logs, sérieusement ?",
  "Jamais. Grafana c'est pas juste pour faire joli, apprends à l'utiliser.",
  "Non. Prometheus ça se configure, c'est pas magique.",
  "Nope. Tes alertes spamment tellement qu'on les a désactivées.",
  "Non. Tu comprends même pas tes métriques mais tu veux de l'aide pour l'optimisation.",
  "Pas question. Tu sais même pas lire un flame graph.",
  "Non. Ton code fait de la fraude fiscale côté sécurité.",
  "Nope. Tu stockes les mots de passe en plaintext et tu demandes des conseils sécu ?",
  "Non. Tes permissions sont plus larges que le Grand Canyon.",
  "Jamais. Tu fais du SQL injection comme si c'était 1995.",
  "Non. Ton WAF c'est un commentaire TODO depuis 3 ans.",
  "Nope. HTTPS optional dans ton app, vraiment ?",
  "Non. Tu sais même pas ce que c'est qu'un CSP header.",
  "Pas question. Tes secrets sont hardcodés dans le repo public.",
  "Non. Ta surface d'attaque est plus grande que la surface de la Terre.",
  "Nope. Tu patches jamais tes dépendances mais tu t'étonnes des vulnérabilités.",
  "Non. CVE-2019-0001 toujours présent dans ton stack, on se demande pourquoi.",
  "Jamais. Tu fais tourner tout en root et tu cherches les problèmes de sécu.",
  "Non. Ton firewall autorise 0.0.0.0/0 partout, génial.",
  "Nope. Tu audites jamais tes logs d'accès mais tu veux traquer les intrusions.",
  "Non. Two-factor auth ? Connais pas, hein ?",
  "Pas question. Tes backups existent que dans tes rêves.",
  "Non. Tu testes jamais tes restore procedures mais tu comptes dessus.",
  "Nope. DR plan ? C'est quoi ça, un nouveau framework ?",
  "Non. Tu sais même pas où sont stockées tes données critiques.",
  "Jamais. RTO et RPO c'est du chinois pour toi.",
  "Non. Ta stratégie de backup c'est 'ctrl+c ctrl+v'.",
  "Nope. Tu versioning même pas tes databases mais tu veux faire du blue-green deployment.",
  "Non. Tes migrations SQL sont écrites avec les pieds.",
  "Pas question. Tu rollback jamais tes changements quand ça pète.",
  "Non. Ta définition de 'ça marche' c'est 'ça compile sans warning'.",
  "Nope. Tests unitaires ? C'est pas dans ton vocabulaire.",
  "Non. Ton coverage est à 12% mais 'les tests c'est pour les faibles'.",
  "Jamais. Tu déploies en prod le vendredi soir, forcément ça va bien se passer.",
  "Non. Feature flags ? Tu connais que les feature bugs.",
  "Nope. Canary deployment avec 100% du traffic, logique.",
  "Non. Tu comprends même pas pourquoi ton app consomme 8GB de RAM pour servir du JSON.",
  "Pas question. N+1 queries partout mais 'c'est l'ORM le problème'.",
  "Non. Tu caches même pas tes endpoints les plus lents.",
  "Nope. Async/await mais tu bloques sur du synchrone, génie.",
  "Non. Tu sais même pas ce que c'est qu'un thread pool.",
  "Jamais. Connection pooling ? Jamais entendu parler.",
  "Non. Tu ouvres une nouvelle connexion DB pour chaque requête, champion.",
  "Nope. Lazy loading mais tu fetch tout d'un coup quand même.",
  "Non. Tu comprends pas pourquoi ton CDN sert rien alors que tu caches rien.",
  "Pas question. Compression disabled partout mais tu te plains de la latence.",
  "Non. HTTP/2 activé mais tu comprends pas pourquoi ça va pas plus vite.",
  "Nope. Tu optimises jamais tes images mais tu veux du 60fps.",
  "Non. Critical rendering path ? C'est quoi ce délire ?",
  "Jamais. Tu charges jQuery pour faire un console.log.",
  "Non. Bundle size de 47MB pour une todo list, normal.",
  "Nope. Tree shaking disabled parce que 'ça casse tout'.",
  "Non. Tu imports toute la lib Lodash pour utiliser une fonction.",
  "Pas question. Webpack config générée par un AI en panne.",
  "Non. Polyfills pour IE6 en 2024, on vit dans le futur.",
  "Nope. CSS-in-JS mais ton runtime CSS fait 12MB.",
  "Non. Media queries ? Tu connais que min-width: 320px.",
  "Jamais. Responsive design en 2024 et ça marche que sur ton écran 4K.",
  "Non. Accessibility ? HTML sémantique ? Des gros mots pour toi.",
  "Nope. ARIA labels inexistants mais tu veux être RGAA compliant.",
  "Non. Keyboard navigation cassée partout mais 'personne utilise Tab anyway'.",
  "Pas question. Contrast ratio de 1.2 sur du blanc, lisible à 100%.",
  "Non. Screen readers pleurent quand ils parsent ton HTML.",
  "Nope. Performance budget ? Tu dépenses sans compter.",
  "Non. Lighthouse score de 12/100 mais 'c'est Google qui comprend rien'.",
  "Jamais. Web vitals dans le rouge mais l'UX est 'parfaite'.",
  "Non. Time to interactive de 47 secondes, record du monde.",
  "Nope. First contentful paint après le heat death de l'univers.",
  "Non. Tu comprends pas pourquoi personne utilise ton app mobile qui pèse 500MB.",
  "Pas question. Progressive web app sans service worker, innovation.",
  "Non. Offline mode ? Internet sera toujours là, pas vrai ?",
  "Nope. App shell ? Tu sais même pas ce que c'est qu'un shell.",
  "Non. Push notifications spam mais tu comprends pas le faible engagement.",
  "Jamais. Mobile first ? Tu développes sur un écran ultrawide de 49 pouces.",
  "Non. Touch targets de 5px mais 'les gens ont des doigts précis'.",
  "Nope. Swipe gestures ? C'est quoi cette sorcellerie ?",
  "Non. Orientation change et ton layout explose, mais c'est 'edge case'.",
  "Pas question. Battery usage optimization ? L'électricité c'est gratuit.",
  "Non. Network-aware loading ? 5G partout dans le monde, évidemment.",
  "Nope. Data usage ? Les forfaits illimités pour tous, bien sûr.",
  "Non. Tu stream de la 4K sur une connexion 56k et tu comprends pas les buffers.",
  "Jamais. Adaptive bitrate ? Tu sers du 4K à tout le monde.",
  "Non. Tu comprends pas pourquoi ton API rate-limit avec 10000 req/sec.",
  "Nope. Circuit breaker ? Tu préfères que tout tombe en cascade.",
  "Non. Retry logic avec exponential backoff ? Tu retry toutes les millisecondes.",
  "Pas question. Timeout configuration ? 'Plus c'est long, plus c'est sûr'.",
  "Non. Graceful degradation ? Tu préfères le crash total.",
  "Nope. Health checks qui retournent toujours 200 même quand tout brûle.",
  "Non. Observability ? Tu observes que dalle de ton système.",
  "Jamais. Tracing distribué dans un monolithe, ça va révolutionner le monde.",
  "Non. Spans qui durent 47 minutes pour une requête SQL.",
  "Nope. Correlation IDs ? Tu corrèles rien du tout.",
  "Non. Structured logging ? Tu log en free text avec des émojis.",
  "Pas question. Log levels ? Tout est en DEBUG ou ERROR, pas d'entre-deux.",
  "Non. Log aggregation ? grep sur 47 serveurs manuellement, efficace.",
  "Nope. Alerting sur des logs d'INFO, le chaos total.",
  "Non. On-call rotation ? Toi 24/7/365, deal with it.",
  "Jamais. Incident response plan ? 'On verra bien ce qui se passe'.",
  "Non. Post-mortem ? Tu préfères oublier et recommencer.",
  "Nope. RCA analysis ? Root cause c'est toujours 'pas de chance'.",
  "Non. Blameless culture ? Tu blame tout le monde sauf toi.",
  "Pas question. Documentation ? Les commentaires dans le code suffisent.",
  "Non. API documentation ? 'Le code se documente tout seul'.",
  "Nope. Changelog ? Git log avec des messages 'fix bug'.",
  "Non. Architecture decision records ? Tu décides au feeling.",
  "Jamais. Runbooks ? Tu impro à chaque incident.",
  "Non. Knowledge sharing ? Tu gardes tout pour toi comme Gollum.",
  "Nope. Code review ? Tu valides tes propres PR.",
  "Non. Pair programming ? Tu codes seul dans ton coin depuis 2003.",
  "Pas question. TDD ? Tests driven par l'envie de finir plus tôt.",
  "Non. Behavior driven development ? Tu développes driven par le café.",
  "Nope. Domain driven design ? Tu designs driven par Stack Overflow.",
  "Non. Event sourcing sans comprendre les events.",
  "Jamais. CQRS pattern mais command et query dans la même méthode.",
  "Non. Microservices mais tout communique avec des fichiers partagés.",
  "Nope. Event-driven architecture avec des events toutes les millisecondes.",
  "Non. Saga pattern implémenté avec des sleep() de 30 secondes.",
  "Pas question. Eventual consistency mais tu paniques quand c'est pas immédiat.",
  "Non. CAP theorem ? Tu veux Consistency, Availability ET Partition tolerance.",
  "Nope. ACID properties ? Tu préfères les BASE... de données corrompues.",
  "Non. Distributed transactions avec 2PC sur 47 microservices.",
  "Jamais. Idempotency ? Tu sais même pas l'écrire correctement.",
  "Non. Immutable infrastructure mais tu patch les serveurs à la main.",
  "Nope. Infrastructure as code mais tes scripts sont dans un Excel.",
  "Non. GitOps workflow avec des push forcés sur main.",
  "Pas question. CI/CD pipeline qui build une fois par mois.",
  "Non. Continuous deployment mais tu valides chaque release manuellement.",
  "Nope. Feature toggles hardcodés en dur dans le code.",
  "Non. A/B testing avec 100% du traffic sur la version A.",
  "Jamais. Chaos engineering mais tu paniques dès qu'un service redémarre.",
  "Non. Fault injection dans un environnement sans monitoring.",
  "Nope. Game days mais personne sait jouer.",
  "Non. Disaster recovery tested une fois en 2019, ça devrait aller.",
  "Pas question. BCP plan écrit sur un post-it jaune.",
  "Non. Compliance audit ? Tu es compliant avec absolument rien.",
  "Nope. GDPR ? 'On est pas en Europe de toute façon'.",
  "Non. Data retention policy ? Tu gardes tout depuis 1987.",
  "Jamais. PII data en plaintext dans les logs.",
  "Non. Encryption at rest ? 'Le disque dur est dans un coffre-fort'.",
  "Nope. Encryption in transit ? HTTP c'est plus simple.",
  "Non. Key management ? Ta clé c'est 'password123'.",
  "Pas question. Certificate management ? Tu renouvelles quand ça expire.",
  "Non. Zero trust architecture mais tu fais confiance à tout le monde.",
  "Nope. Least privilege principle mais tout le monde est admin.",
  "Non. Defense in depth mais une seule couche de défense... cassée.",
  "Jamais. Security headers ? Tu headers que dalle.",
  "Non. OWASP top 10 ? Tu es dans le top 10 des vulnérabilités.",
  "Nope. Penetration testing ? Tu testes jamais rien.",
  "Non. Vulnerability scanning mais tu ignores tous les résultats.",
  "Pas question. Security awareness training ? Tu awareness personne.",
  "Non. Incident response team ? C'est toi tout seul avec Google.",
  "Nope. Forensic analysis ? Tu analyses rien du tout.",
  "Non. Threat modeling ? Tu modèles des bisounours.",
  "Jamais. Risk assessment ? Le seul risque c'est que je démissionne.",
  "Non. Business continuity ? Tu continues jusqu'à ce que tout plante.",
  "Nope. Vendor security assessment ? Tu fais confiance à tous les vendors.",
  "Non. Third-party risk management ? Third-party = third problème.",
  "Pas question. Supply chain security ? Tu sécurises que dalle.",
  "Non. Container security ? Docker run --privileged sur tout.",
  "Nope. Image scanning ? Tu scan rien du tout.",
  "Non. Runtime security ? Tu sécurises après avoir été hacké.",
  "Jamais. Network segmentation ? Tout est dans le même VLAN.",
  "Non. Micro-segmentation ? Tu segmentes même pas en macro.",
  "Nope. WAF rules ? Web Application Firewall = Web Absence de Firewall.",
  "Non. API gateway ? Tu gateway direct sur la DB.",
  "Pas question. Rate limiting ? Tu limites jamais rien.",
  "Non. API versioning ? v1 forever, même quand ça marche plus.",
  "Nope. Backward compatibility ? Breaking changes à chaque release.",
  "Non. Semantic versioning ? Tu versions avec des noms de Game of Thrones.",
  "Jamais. Release notes ? 'Nouveautés: des trucs. Bugs: résolus. Bisous.'",
  "Non. Hotfix process ? Tu fixes à chaud avec un chalumeau.",
  "Nope. Rollback strategy ? 'On verra si ça marche pas'.",
  "Non. Blue-green deployment mais bleu et vert en même temps.",
  "Pas question. Canary releases avec 100% des canaris qui meurent.",
  "Non. Feature flags mais elles sont toujours à true.",
  "Nope. Progressive delivery ? Tu délivres tout d'un coup, progressivement.",
  "Non. Deployment automation mais tu cliques sur 47 boutons manuellement.",
  "Jamais. Configuration management ? Tu configures à la main à chaque fois.",
  "Non. Environment parity ? Dev et prod sont sur des planètes différentes.",
  "Nope. 12-factor app mais tu respectes 0 facteur sur 12.",
  "Non. Stateless services mais tu stockes l'état partout.",
  "Pas question. Horizontal scaling ? Tu scale verticalement jusqu'à exploser.",
  "Non. Load balancing ? Tu balances la charge sur un seul serveur.",
  "Nope. Auto-scaling mais manual-scaling à 3h du matin.",
  "Non. Capacity planning ? Tu planifies rien du tout.",
  "Jamais. Performance testing ? Tu testes jamais les performances.",
  "Non. Stress testing ? Tu stresses juste les développeurs.",
  "Nope. Load testing avec un seul utilisateur.",
  "Non. Chaos testing mais c'est déjà le chaos permanent.",
  "Pas question. Synthetic monitoring ? Tu monitores que les vraies pannes.",
  "Non. Real user monitoring ? Les vrais utilisateurs, tu les évites.",
  "Nope. Application performance monitoring ? APM = Absolument Pas Monitoring.",
  "Non. Infrastructure monitoring ? Tu monitores ta facture d'électricité seulement.",
  "Jamais. Log monitoring ? Tu log pour remplir les disques.",
  "Non. Metric collection ? Tu collectes que les problèmes.",
  "Nope. Dashboard création ? Ton dashboard c'est Task Manager.",
  "Non. Alert fatigue ? Tu es fatigué avant même que ça alerte.",
  "Pas question. Runbook automation ? Tu automatises rien pantoute.",
  "Non. Self-healing systems ? Tes systèmes se blessent tout seuls.",
  "Nope. Auto-remediation ? Tu remédies manuellement depuis 2003.",
  "Non. Predictive analytics ? Tu prédis rien du tout sauf les pannes.",
  "Jamais. Machine learning ops ? ML = Mega Lag.",
  "Non. Data pipeline ? Ton pipeline c'est un tuyau d'arrosage.",
  "Nope. ETL process ? Extract, Transform, Lose.",
  "Non. Data warehouse ? Tu stockes dans un Google Sheets.",
  "Pas question. Data lake ? Le tien c'est plutôt un marécage.",
  "Non. Data mesh ? Mesh = Mess pour toi.",
  "Nope. Data governance ? Tu gouvernes rien du tout.",
  "Non. Data quality ? Quality = Optional.",
  "Jamais. Data lineage ? Tu traces rien de A à Z.",
  "Non. Data catalog ? Ton catalogue c'est un README.txt.",
  "Nope. Data discovery ? Tu découvres tes données par hasard.",
  "Non. Data privacy ? Privacy = Public pour toi.",
  "Pas question. Data anonymization ? Tu anonymises avec prénom+nom.",
  "Non. Data masking ? Tu masques avec des astérisques sur l'écran.",
  "Nope. Pseudonymization ? Tu utilises Mickey Mouse pour tout le monde.",
  "Non. Data classification ? Tout est 'Important' ou 'Très Important'.",
  "Jamais. Data lifecycle management ? Tu manages rien du tout.",
  "Non. Data archiving ? Archive = suppression définitive.",
  "Nope. Data purging ? Tu purges jamais rien, hoarder de données.",
  "Non. Backup verification ? Tu vérifies que le bouton 'Backup' existe.",
  "Pas question. Restore testing ? Tu restores quand tout est cassé.",
  "Non. Disaster simulation ? Ton disaster c'est la réalité quotidienne.",
  "Nope. Business impact analysis ? Impact = 'ça va mal finir'.",
  "Non. Risk register ? Tu registers rien dans Excel.",
  "Jamais. Risk mitigation ? Tu mitigues avec des prières.",
  "Non. Business process mapping ? Ton process c'est 'on improvise'.",
  "Nope. Workflow automation ? Tu workflows à la main depuis 1995.",
  "Non. Change management ? Tu changes sans prévenir personne.",
  "Pas question. Release management ? Tu releases quand ça te chante.",
  "Non. Project management ? Tu manages avec des post-its volants.",
  "Nope. Agile methodology ? Tu es agile comme un escargot.",
  "Non. Scrum master ? Tu es maître de rien du tout.",
  "Jamais. Sprint planning ? Tu sprintes vers la sortie.",
  "Non. Daily standup ? Tu stands jamais up.",
  "Nope. Retrospective ? Tu rétrospectives jamais rien.",
  "Non. Burndown chart ? Ton chart c'est juste down.",
  "Pas question. Velocity tracking ? Ta vélocité c'est celle d'un glacier.",
  "Non. Story points ? Tes stories valent 0 point.",
  "Nope. Definition of done ? Ton done c'est 'compile sans erreur'.",
  "Non. Acceptance criteria ? Tu acceptes tout sans critère.",
  "Jamais. User story mapping ? Tu maps rien pour les users.",
  "Non. Product backlog ? Ton backlog c'est un carnet à spirale.",
  "Nope. Backlog grooming ? Tu grooms rien du tout.",
  "Non. Sprint review ? Tu reviews jamais tes sprints ratés.",
  "Pas question. Stakeholder engagement ? Tu engages personne.",
  "Non. Customer feedback ? Tes customers feedback par des tickets de rage.",
  "Nope. User experience testing ? UX = User eXit.",
  "Non. Usability testing ? Usability = Mission impossible.",
  "Jamais. A/B testing avec un échantillon de 2 utilisateurs.",
  "Non. Conversion optimization ? Tu optimises les conversions vers la concurrence.",
  "Nope. Funnel analysis ? Ton funnel c'est un entonnoir percé.",
  "Non. Customer journey mapping ? Ton journey c'est un labyrinthe.",
  "Pas question. Persona development ? Tes personas c'est 'utilisateur lambda'.",
  "Non. Market research ? Tu recherches dans tes poches.",
  "Nope. Competitive analysis ? Tu analyses que tes échecs.",
  "Non. Feature prioritization ? Tu priorises au Pif-o-mètre.",
  "Jamais. Product roadmap ? Ta roadmap c'est un chemin de terre.",
  "Non. KPI tracking ? Tu tracks rien du tout.",
  "Nope. OKR setting ? Objectives = 'survivre', Key Results = 'on verra'.",
  "Non. Business metrics ? Tes metrics c'est ton stress level.",
  "Pas question. Revenue optimization ? Tu optimises les pertes.",
  "Non. Cost reduction ? Tu réduis la qualité, pas les coûts.",
  "Nope. ROI calculation ? Return on Investment = Return to McDonald's.",
  "Non. Budget planning ? Tu planifies avec une boule de cristal.",
  "Jamais. Resource allocation ? Tu alloues tout à toi-même.",
  "Non. Team scaling ? Tu scales down jusqu'à être tout seul.",
  "Nope. Hiring process ? Tu hires tes potes de la fac.",
  "Non. Performance review ? Tu review jamais les performances.",
  "Pas question. Career development ? Career = Carrière dans une mine.",
  "Non. Skills assessment ? Tu assesses rien du tout.",
  "Nope. Training program ? Ton training c'est YouTube University.",
  "Non. Knowledge transfer ? Tu transferes rien avant de partir.",
  "Jamais. Documentation maintenance ? Tes docs datent de 2003.",
  "Non. Process improvement ? Tu améliores jamais rien.",
  "Nope. Quality assurance ? QA = Question Abandonnée.",
  "Non. Code quality metrics ? Ton metric c'est 'ça compile'.",
  "Pas question. Technical debt management ? Tu manages que l'accumulation.",
  "Non. Legacy system migration ? Tu migres vers du plus legacy.",
  "Nope. Platform modernization ? Tu modernises vers du vintage.",
  "Non. Cloud adoption ? Ton cloud c'est un serveur sous ton bureau.",
  "Jamais. Serverless architecture avec 47 serveurs.",
  "Non. Edge computing ? Tu computes au centre de nulle part.",
  "Nope. Content delivery network ? Tu delivers avec La Poste.",
  "Non. Global load balancing ? Tu balances localement ton bureau.",
  "Pas question. Multi-region deployment ? Tu déploies dans ton garage seulement.",
  "Non. Disaster recovery site ? Ton site de recovery c'est ton canapé.",
  "Nope. High availability ? Availability = 23% uptime.",
  "Non. Fault tolerance ? Tu tolères toutes les fautes sauf celles des autres.",
  "Jamais. Resilience engineering ? Tu engineers que de la fragilité.",
  "Non. System redundancy ? Redondant = répéter les mêmes erreurs.",
  "Nope. Failover mechanism ? Tu fail over complètement.",
  "Non. Circuit breaker pattern ? Ton pattern c'est de casser tous les circuits.",
  "Pas question. Bulkhead pattern ? Tu patterns avec des seaux percés.",
  "Non. Timeout configuration ? Timeout = jamais.",
  "Nope. Retry logic ? Tu retry jusqu'à l'infini et au-delà.",
  "Non. Exponential backoff ? Tu backoff linéairement vers l'échec.",
  "Jamais. Jitter implementation ? Tu jitter dans tous les sens.",
  "Non. Rate limiting algorithm ? Ton algorithme c'est 'YOLO'.",
  "Nope. Token bucket ? Ton bucket c'est percé.",
  "Non. Sliding window ? Ta window slide vers la catastrophe.",
  "Pas question. API throttling ? Tu throttles à fond la caisse vers le mur.",
  "Non. Quota management ? Tu quotas sans compter.",
  "Nope. Usage tracking ? Tu tracks ton usage de café seulement.",
  "Non. Billing integration ? Tu intègres les factures dans la poubelle.",
  "Jamais. Metering service ? Tu meters rien du tout.",
  "Non. Cost allocation ? Tu alloues tous les coûts aux autres.",
  "Nope. Resource tagging ? Tu tags avec '#YOLO' partout.",
  "Non. Cloud cost optimization ? Tu optimises vers le maximum.",
  "Pas question. Reserved instance planning ? Tu réserves rien, tu improvises.",
  "Non. Spot instance strategy ? Ta stratégie c'est de spot tous les problèmes.",
  "Nope. Auto-scaling policies ? Tes policies c'est 'scale jusqu'à la faillite'.",
  "Non. Instance right-sizing ? Tu right-sizes vers le plus gros possible.",
  "Jamais. Storage optimization ? Tu optimises vers le gaspillage.",
  "Non. Data transfer optimization ? Tu transferes tout en 8K non compressé.",
  "Nope. Network optimization ? Tu optimises vers la lenteur.",
  "Non. Bandwidth management ? Tu manages avec un tuyau d'arrosage.",
  "Pas question. CDN configuration ? Ton CDN c'est un serveur FTP.",
  "Non. Cache strategy ? Tu caches ta stratégie inexistante.",
  "Nope. Cache invalidation ? L'un des deux problèmes les plus durs en informatique.",
  "Non. Cache warming ? Tu warmes ton cache au micro-ondes.",
  "Jamais. Cache partitioning ? Tu partitionnes ton cache au marteau.",
  "Non. Cache coherence ? Cohérence = concept inconnu.",
  "Nope. Distributed caching ? Tu distribues tes caches à la volée.",
  "Non. Redis clustering ? Tu clusters rien du tout.",
  "Pas question. Memcached tuning ? Tu tunes avec un diapason cassé.",
  "Non. Database caching ? Tu caches tes problèmes de DB.",
  "Nope. Query optimization ? Tu optimises vers la lenteur maximale.",
  "Non. Index strategy ? Ta stratégie c'est 'pas d'index du tout'.",
  "Jamais. Database sharding ? Tu shards avec un hachoir.",
  "Non. Replication lag ? Ton lag c'est mesuré en années-lumière.",
  "Nope. Master-slave configuration ? Tu configures avec deux pigeons voyageurs.",
  "Non. Read replica ? Tu répliques que les erreurs.",
  "Pas question. Write optimization ? Tu écris avec un pinceau sur du sable.",
  "Non. Connection pooling ? Tu pools dans une piscine vide.",
  "Nope. Transaction isolation ? Tu isoles rien du tout.",
  "Non. ACID compliance ? Acide = ce qui coule dans tes veines.",
  "Jamais. Stored procedures ? Tu stockes tes procédures sur des post-its.",
  "Non. Database migration ? Tu migres vers du plus obsolète.",
  "Nope. Schema versioning ? Tu versionnes avec des numéros aléatoires.",
  "Non. Data modeling ? Tu models avec de la pâte à modeler.",
  "Pas question. Normalization ? Tu normalises vers l'anormal.",
  "Non. Denormalization ? Tu dénormalises ce qui était déjà normal.",
  "Nope. Foreign key constraints ? Tes clés sont toutes étrangères.",
  "Non. Referential integrity ? Ton intégrité référentielle est corrompue.",
  "Jamais. Check constraints ? Tu check jamais rien.",
  "Non. Trigger optimization ? Tes triggers déclenchent l'apocalypse.",
  "Nope. View materialization ? Tes vues sont imaginaires.",
  "Non. Partition pruning ? Tu prunes rien, tu laisses tout pousser.",
  "Pas question. Statistics update ? Tes stats datent de l'âge de pierre.",
  "Non. Query plan analysis ? Tu analyses avec une boule de cristal.",
  "Nope. Execution plan optimization ? Tu exécutes sans plan.",
  "Non. Cost-based optimizer ? Ton coût c'est toujours maximum.",
  "Jamais. Hint usage ? Tu hints vers la catastrophe.",
  "Non. Parallel execution ? Tu exécutes tout en série depuis 1995.",
  "Nope. Bulk operations ? Tes opérations bulk sont en retail.",
  "Non. Batch processing ? Tu process un par un manuellement.",
  "Pas question. Stream processing ? Tu process avec un ruisseau.",
  "Non. Real-time analytics ? Tes analytics sont en différé de 3 mois.",
  "Nope. Time series data ? Tes séries temporelles sont atemporelles.",
  "Non. Event streaming ? Tu streams des événements de 2003.",
  "Jamais. Message queuing ? Tu queues dans le désordre.",
  "Non. Publish-subscribe pattern ? Tu subscribes à rien, tu publishes du vide.",
  "Nope. Event sourcing ? Tu sources tes événements de nulle part.",
  "Non. CQRS implementation ? Tu implements Command Query Responsibility Segregation n'importe comment.",
  "Pas question. Saga pattern ? Tes sagas finissent toutes mal.",
  "Non. Orchestration vs Choreography ? Tu orchestres un chaos.",
  "Nope. Workflow engine ? Ton engine est en panne.",
  "Non. Business process automation ? Tu automatises les erreurs.",
  "Jamais. Rule engine ? Tes règles sont faites pour être cassées.",
  "Non. Decision tables ? Tu décides avec un dé pipé.",
  "Nope. Machine learning pipeline ? Ton pipeline ML c'est de la plomberie.",
  "Non. Model training ? Tu trains tes modèles à échouer.",
  "Pas question. Feature engineering ? Tu engineers des features cassées.",
  "Non. Model deployment ? Tu déploies des modèles défaillants.",
  "Nope. A/B testing framework ? Ton framework teste A vs A.",
  "Non. Recommendation engine ? Tu recommandes n'importe quoi.",
  "Jamais. Search relevance ? Tes recherches sont pertinentes comme un poisson rouge.",
  "Non. Personalization algorithm ? Tu personnalises pour Mr. Todo el Mundo.",
  "Nope. Content management ? Tu manages du contenu inexistant.",
  "Non. Digital asset management ? Tu manages tes assets dans un dossier 'Mes Documents'.",
  "Pas question. Version control ? Tu contrôles rien du tout.",
  "Non. Branch strategy ? Ta stratégie c'est de casser toutes les branches.",
  "Nope. Merge conflicts ? Tu merges sans résoudre les conflits.",
  "Non. Code review process ? Tu reviews ton propre code dans le miroir.",
  "Jamais. Pull request ? Tu push direct sur main.",
  "Non. Commit message standards ? Tes messages c'est 'fix stuff'.",
  "Nope. Git hooks ? Tu hooks rien du tout.",
  "Non. Pre-commit checks ? Tu check après avoir cassé.",
  "Pas question. Continuous integration ? Tu intègres sporadiquement.",
  "Non. Build automation ? Tu build manuellement depuis 2003.",
  "Nope. Test automation ? Tu testes à la main quand tu y penses.",
  "Non. Deployment automation ? Tu déploies avec des clics.",
  "Jamais. Environment promotion ? Tu promeus vers la production de catastrophes.",
  "Non. Configuration management ? Tu configures au petit bonheur la chance.",
  "Nope. Secret management ? Tes secrets sont publics.",
  "Non. Certificate management ? Tes certificats expirent tous en même temps.",
  "Pas question. Key rotation ? Tu tournes tes clés une fois par décennie.",
  "Non. Access control ? Tu contrôles l'accès en fermant les yeux.",
  "Nope. Identity management ? Tu identifies personne.",
  "Non. Single sign-on ? Tu signes off partout.",
  "Jamais. Multi-factor authentication ? Ton facteur c'est un dé.",
  "Non. Role-based access ? Ton rôle c'est 'super admin' pour tout.",
  "Nope. Attribute-based access ? Tes attributs sont tous cassés.",
  "Non. Zero trust network ? Tu fais confiance à tout le monde.",
  "Pas question. Network segmentation ? Tu segmentes avec du scotch.",
  "Non. Firewall configuration ? Ton firewall c'est un grillage.",
  "Nope. Intrusion detection ? Tu détectes après l'apocalypse.",
  "Non. Vulnerability scanning ? Tu scans avec tes yeux fermés.",
  "Jamais. Penetration testing ? Tu pénètres dans tes propres systèmes par accident.",
  "Non. Security audit ? Tu audites ta collection de GIFs de chats.",
  "Nope. Compliance reporting ? Tu reportes à quand tu auras le temps.",
  "Non. Risk assessment ? Tu assesses le risque de bien faire les choses.",
  "Pas question. Business continuity ? Tu continues jusqu'à l'extinction.",
  "Non. Disaster recovery ? Tu recovers avec des bougies et des prières.",
  "Nope. Backup strategy ? Ta stratégie c'est 'on verra bien'.",
  "Non. Data recovery ? Tu recovers les données supprimées avec un aimant.",
  "Jamais. System restore ? Tu restores le système à l'âge de pierre."
]